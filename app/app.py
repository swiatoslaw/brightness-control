import os
import pickle
import sys
import warnings

# Ingore error when integrate PyQt5 and pywinauto
warnings.simplefilter('ignore', UserWarning)
sys.coinit_flags = 2

from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QMainWindow

from app.app_ui import Ui_MainWindow
from app.automation.auto import start, center_mouse

# Ui_MainWindow class generated by PyQt5 during execution
# to manually generate: pyuic5 app/app.ui > app/app_ui.py
Ui: Ui_MainWindow = uic.loadUiType('app/app.ui')[0]


class MainApp(QMainWindow, Ui):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)

        self.last_value = self.unpickle_value()

        self.label_last_value.setText(self.label_last_value.text() + str(self.last_value))
        self.value_box.setValue(self.last_value)

        self.handle_buttons()

    def handle_buttons(self):
        self.button_40.clicked.connect(lambda: self.set_value(40))
        self.button_50.clicked.connect(lambda: self.set_value(50))
        self.button_60.clicked.connect(lambda: self.set_value(60))
        self.button_70.clicked.connect(lambda: self.set_value(70))
        self.button_80.clicked.connect(lambda: self.set_value(80))
        self.button_100.clicked.connect(lambda: self.set_value(100))

        self.button_cancel.clicked.connect(self.close)
        self.button_ok.clicked.connect(self.set_brightness)

    def set_value(self, value):
        self.value_box.setValue(value)

    def set_brightness(self):
        self.last_value = self.value_box.value()
        self.pickle_value(self.last_value)
        self.showMinimized()
        start(self.value_box.value())
        # self.showNormal()
        self.close()
        center_mouse()

    @staticmethod
    def unpickle_value():
        if os.path.exists('data.pickle'):
            with open('data.pickle', 'rb') as f:
                return pickle.load(f)
        else:
            print('data.pickle file not found!')
            return 0

    @staticmethod
    def pickle_value(value):
        with open('data.pickle', 'wb') as f:
            pickle.dump(value, f)


def main():
    app = QApplication([])
    window = MainApp()  # Union[QMainWindow, Ui_MainWindow]
    window.show()

    center_mouse()
    app.exec_()


if __name__ == '__main__':
    main()
